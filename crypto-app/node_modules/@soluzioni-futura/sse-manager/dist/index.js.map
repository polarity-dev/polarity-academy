{"version":3,"sources":["../src/index.ts","../src/adapters/events/EmitterEventsAdapter.ts","../src/adapters/events/EventsAdapter.ts","../src/adapters/https/HttpAdapter.ts","../src/adapters/https/ExpressHttpAdapter.ts","../src/adapters/https/FastifyHttpAdapter.ts","../src/adapters/events/PostgresEventsAdapter.ts"],"names":["EventEmitter"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { EventEmitter } from \"events\"\nimport { randomBytes } from \"crypto\"\nimport EmitterEventsAdapter from \"./adapters/events/EmitterEventsAdapter\"\nimport EventsAdapter from \"./adapters/events/EventsAdapter\"\n\nimport ExpressHttpAdapter from \"./adapters/https/ExpressHttpAdapter\"\nimport HTTPAdapter from \"./adapters/https/HttpAdapter\"\nimport FastifyHttpAdapter from \"./adapters/https/FastifyHttpAdapter\"\nimport PostgresEventsAdapter from \"./adapters/events/PostgresEventsAdapter\"\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport type SSEManagerOptions = {\n  httpAdapter?: HTTPAdapter,\n  eventsAdapter?: EventsAdapter,\n  keepAliveInterval?: number | null\n}\n\nexport type SSEMessage = { data: string, id?: number | string,  channel?: string, retry?: number }\n\nexport type SSEStreamOptions = { keepAliveInterval: number | null }\n\nexport class SSEManager extends EventEmitter {\n  readonly id: string\n  httpAdapter: HTTPAdapter\n  eventsAdapter: EventsAdapter\n  sseStreams: { [id: string]: SSEStream } = {}\n  rooms: { [id: string]: SSEStream[] } = {}\n  #keepAliveInterval: number | null\n\n  constructor(options?: SSEManagerOptions) {\n    super()\n    this.id = randomBytes(16).toString(\"hex\")\n    this.httpAdapter = options?.httpAdapter || new ExpressHttpAdapter()\n    this.eventsAdapter = options?.eventsAdapter || new EmitterEventsAdapter()\n    this.#keepAliveInterval = typeof options?.keepAliveInterval !== \"undefined\" ? options.keepAliveInterval : 15000\n  }\n\n  async init(): Promise<void> {\n    if (this.eventsAdapter.init) {\n      await this.eventsAdapter.init()\n    }\n\n    await Promise.all([\n      this.eventsAdapter.on(\"broadcast\", (data) => {\n        const { id, message } = JSON.parse(data) as { id: string, message: SSEMessage }\n        if (this.sseStreams[id]) {\n          this.sseStreams[id].broadcast(message)\n        } else if (this.rooms[id]) {\n          Object.values(this.rooms[id]).forEach(sseStream => {\n            sseStream.broadcast(message)\n          })\n        }\n      }),\n\n      this.eventsAdapter.on(\"closeSSEStream\", (data) => {\n        const { id } = JSON.parse(data) as { id: string }\n        if (this.sseStreams[id]) {\n          this.sseStreams[id].close()\n        } else if (this.rooms[id]) {\n          Object.values(this.rooms[id]).forEach(sseStream => {\n            sseStream.close()\n          })\n        }\n      }),\n\n      this.eventsAdapter.on(\"addSSEStreamToRoom\", (data) => {\n        const { streamId, roomId } = JSON.parse(data) as { streamId: string, roomId: string }\n        if (this.sseStreams[streamId]) {\n          if (!this.rooms[roomId]) {\n            this.rooms[roomId] = []\n          }\n          this.rooms[roomId].push(this.sseStreams[streamId])\n        }\n      }),\n\n      this.eventsAdapter.on(\"removeSSEStreamFromRoom\", (data) => {\n        const { streamId, roomId } = JSON.parse(data) as { streamId: string, roomId: string }\n        if (this.sseStreams[streamId]) {\n          this.rooms[roomId]?.splice(this.rooms[roomId]?.indexOf(this.sseStreams[streamId]), 1)\n        }\n      }),\n\n      this.eventsAdapter.on(\"closeRoom\", (data) => {\n        const { roomId } = JSON.parse(data) as { roomId: string }\n        if (this.rooms[roomId]) {\n          this.rooms[roomId].forEach(sseStream => {\n            sseStream.close()\n          })\n          delete this.rooms[roomId]\n        }\n      })\n    ])\n  }\n\n  async createSSEStream(res: any, options: SSEStreamOptions = { keepAliveInterval: this.#keepAliveInterval }): Promise<SSEStream> {\n    const sseStream = new SSEStream(res, this, options)\n    this.sseStreams[sseStream.id] = sseStream\n    sseStream.on(\"close\", async() => {\n      this.sseStreams[sseStream.id].rooms.forEach(roomId => {\n        const room = this.rooms[roomId]\n        for (let i = 0; i < room.length; i++) {\n          if (room[i].id === sseStream.id) {\n            room.splice(i, 1)\n            break\n          }\n        }\n\n        if (!room.length) {\n          delete this.rooms[roomId]\n        }\n      })\n      delete this.sseStreams[sseStream.id]\n    })\n\n    return sseStream\n  }\n\n  async broadcast(id: string, message: SSEMessage): Promise<void> {\n    if (this.sseStreams[id]) {\n      this.sseStreams[id].broadcast(message)\n    } else {\n      await this.eventsAdapter.emit(\"broadcast\", JSON.stringify({ id, message }))\n    }\n  }\n\n  async closeSSEStream(id: string): Promise<void> {\n    if (this.sseStreams[id]) {\n      this.sseStreams[id].close()\n    } else {\n      await this.eventsAdapter.emit(\"closeSSEStream\", JSON.stringify({ id }))\n    }\n  }\n\n  async addSSEStreamToRoom(streamId: string, roomId: string): Promise<void> {\n    if (this.sseStreams[streamId]) {\n      if (!this.rooms[roomId]) {\n        this.rooms[roomId] = []\n      }\n      this.rooms[roomId].push(this.sseStreams[streamId])\n      this.sseStreams[streamId].rooms.push(roomId)\n    } else {\n      await this.eventsAdapter.emit(\"addSSEStreamToRoom\", JSON.stringify({ streamId, roomId }))\n    }\n  }\n\n  async removeSSEStreamFromRoom(streamId: string, roomId: string): Promise<void> {\n    if (this.sseStreams[streamId]) {\n      this.rooms[roomId]?.splice(this.rooms[roomId]?.indexOf(this.sseStreams[streamId]), 1)\n    } else {\n      await this.eventsAdapter.emit(\"removeSSEStreamFromRoom\", JSON.stringify({ streamId, roomId }))\n    }\n  }\n\n  async closeRoom(roomId: string): Promise<void> {\n    await this.eventsAdapter.emit(\"closeRoom\", JSON.stringify({ roomId }))\n  }\n}\n\nexport const createSSEManager = async(options?: SSEManagerOptions): Promise<SSEManager> => {\n  const sseManager = new SSEManager(options)\n  await sseManager.init()\n  return sseManager\n}\n\nexport class SSEStream extends EventEmitter {\n  readonly id: string\n  readonly res: any\n  readonly sseManager: SSEManager\n  readonly rooms: string[]\n  readonly options: SSEStreamOptions\n  closed: boolean\n  #keepAliveTimeout: ReturnType<typeof setTimeout> | null = null\n\n  constructor(res: any, sseManager: SSEManager, options: SSEStreamOptions) {\n    super()\n    this.id = randomBytes(16).toString(\"hex\")\n    this.res = res\n    this.sseManager = sseManager\n    this.rooms = []\n    this.options = options\n    this.closed = false\n\n    sseManager.httpAdapter.setResHeaders(res, {\n      \"Cache-Control\": \"no-cache\",\n      \"Content-Type\": \"text/event-stream\",\n      \"Connection\": \"keep-alive\"\n    })\n\n    sseManager.httpAdapter.flushResHeaders(res)\n\n    sseManager.httpAdapter.onCloseCallback(res, () => {\n      sseManager.httpAdapter.endRes(res)\n      this.closed = true\n      if (this.#keepAliveTimeout) {\n        clearTimeout(this.#keepAliveTimeout)\n      }\n      this.emit(\"close\")\n    })\n\n    this.on(\"data\", data => sseManager.httpAdapter.writeRes(res, data))\n    this.on(\"end\", () => sseManager.httpAdapter.endRes(res))\n\n    this.#setKeepAliveInterval()\n  }\n\n  #setKeepAliveInterval = (): void => {\n    if (this.#keepAliveTimeout) {\n      clearTimeout(this.#keepAliveTimeout)\n    }\n\n    if (this.options.keepAliveInterval) {\n      this.#keepAliveTimeout = setTimeout(() => {\n        this.keepAlive()\n        this.#setKeepAliveInterval()\n      }, this.options.keepAliveInterval)\n    }\n  }\n\n  keepAlive(): void {\n    this.sseManager.httpAdapter.writeRes(this.res, \":keep-alive\\n\\n\")\n  }\n\n  broadcast(message: SSEMessage): void {\n    this.emit(\"data\", `${Object.entries(message).map(([k, v]) => `${k}: ${v}`).join(\"\\n\")}\\n\\n`)\n    this.#setKeepAliveInterval()\n  }\n\n  close(): void {\n    this.emit(\"end\")\n  }\n\n  addToRoom(id: string): Promise<void> {\n    return this.sseManager.addSSEStreamToRoom(this.id, id)\n  }\n\n  removeFromRoom(id: string): Promise<void> {\n    return this.sseManager.removeSSEStreamFromRoom(this.id, id)\n  }\n}\n\nexport { ExpressHttpAdapter, FastifyHttpAdapter, PostgresEventsAdapter, EmitterEventsAdapter, HTTPAdapter, EventsAdapter}","import { EventEmitter } from 'events'\nimport EventsAdapter from './EventsAdapter'\n\nexport default class EmitterEventsAdapter extends EventsAdapter {\n    #emitter = new EventEmitter()\n  \n    constructor() {\n      super({\n        emit: (event, data) => {\n          this.#emitter.emit(event, data)\n          return Promise.resolve()\n        },\n        on: (event, fn) => {\n          this.#emitter.on(event, (data) => {\n            return fn(data, event)\n          })\n          return Promise.resolve()\n        }\n      })\n    }\n}","export type EventsAdapterEmitFn = (event: string, data: string) => Promise<void>\nexport type EventsAdapterOnFn = (event: string, fn: (data: string, event: string) => void) => Promise<void>\nexport type EventsAdapterInitFn = () => Promise<void>\n\n\nexport default class EventsAdapter {\n    emit: EventsAdapterEmitFn\n    on: EventsAdapterOnFn\n    init?: EventsAdapterInitFn\n  \n    constructor({\n      emit,\n      on,\n      init\n    }: {\n      emit: EventsAdapterEmitFn,\n      on: EventsAdapterOnFn,\n      init?: EventsAdapterInitFn\n    }) {\n      this.emit = emit\n      this.on = on\n      this.init = init\n    }\n}","export type HTTPAdapterSetResHeadersFn = (res: any, headers: { [key: string]: string }) => void\nexport type HTTPAdapterWriteResFn = (res: any, data: string) => void\nexport type HTTPFlushResHeadersFn = (res: any) => void\nexport type HTTPEndResHeadersFn = (res: any) => void\nexport type HTTPResOnCloseCallbackFn = (res: any, fn: () => void) => void\n\n\nexport default class HTTPAdapter {\n    setResHeaders: HTTPAdapterSetResHeadersFn\n    writeRes: HTTPAdapterWriteResFn\n    flushResHeaders: HTTPFlushResHeadersFn\n    endRes: HTTPEndResHeadersFn\n    onCloseCallback: HTTPResOnCloseCallbackFn\n  \n    constructor({\n      setResHeaders,\n      writeRes,\n      flushResHeaders,\n      endRes,\n      onCloseCallback\n    }: {\n        setResHeaders: HTTPAdapterSetResHeadersFn,\n        writeRes: HTTPAdapterWriteResFn,\n        flushResHeaders: HTTPFlushResHeadersFn,\n        endRes: HTTPEndResHeadersFn,\n        onCloseCallback: HTTPResOnCloseCallbackFn\n     }) {\n      this.setResHeaders = setResHeaders\n      this.writeRes = writeRes\n      this.flushResHeaders = flushResHeaders\n      this.endRes = endRes\n      this.onCloseCallback = onCloseCallback\n    }\n  }\n  ","import { Response } from \"express\"\nimport HTTPAdapter from \"./HttpAdapter\"\n\nexport default class ExpressHttpAdapter extends HTTPAdapter {\n    constructor() {\n      super({\n        setResHeaders: (res: Response, headers): void => {\n          Object.entries(headers).forEach(([k, v]) => res.set(k, v))\n        },\n  \n        writeRes: (res: Response, data): void => {\n          res.write(data)\n  \n          const resWithFlush = res as Response & { flush?: () => void }\n          if (typeof resWithFlush.flush  === \"function\") {\n            resWithFlush.flush()\n          }\n        },\n  \n        flushResHeaders: (res: Response): void => {\n          res.flushHeaders()\n        },\n  \n        endRes: (res: Response): void => {\n          res.end()\n        },\n  \n        onCloseCallback: (res: Response, fn): void => {\n          res.on(\"close\", fn)\n        }\n      })\n    }\n  }","import HTTPAdapter from \"./HttpAdapter\"\nimport { FastifyReply } from \"fastify/types/reply\"\n\nexport default class FastifyHttpAdapter extends HTTPAdapter {\n    constructor() {\n      super({\n        setResHeaders: (res: FastifyReply, headers): void => {\n          Object.entries(headers).forEach(([k, v]) => res.raw.setHeader(k, v))\n        },\n  \n        writeRes: (res: FastifyReply, data): void => {\n          res.raw.flushHeaders()\n          res.raw.write(data)\n          res.raw.flushHeaders()\n        },\n  \n        flushResHeaders: (res: FastifyReply): void => {\n          res.raw.flushHeaders()\n        },\n  \n        endRes: (res: FastifyReply): void => {\n          res.raw.end()\n        },\n  \n        onCloseCallback: (res: FastifyReply, fn): void => {\n          res.raw.on(\"close\", fn)\n        }\n      })\n    }\n  }","import EventsAdapter from './EventsAdapter'\nimport postgres from 'postgres'\n\nexport default class PostgresEventsAdapter extends EventsAdapter {\n    #client: ReturnType<typeof postgres>;\n  \n    constructor(client: ReturnType<typeof postgres>) {\n      super({\n        emit: async(event, data) => {\n          await this.#client.notify(event, data)\n        },\n        on: async(event, fn) => {\n          await this.#client.listen(event, (data: string) => fn(data, event))\n        }\n      })\n\n      this.#client = client\n    }\n  }"]}